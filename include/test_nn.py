import dill
import pytest
import jsonpickle
import numpy
from nn import neural_network


def test_serialize_deserialize():
    # Tests if the serialized neural network is the same to its deserialized version but different to other neural network
    a = neural_network(2, 4, 1)
    a.set_learning_rate(5)
    b = neural_network.deserialize(a.serialize())
    c = neural_network(2, 4, 1)
    assert type(a.serialize()) == bytes
    assert jsonpickle.encode(a) == jsonpickle.encode(b)
    assert jsonpickle.encode(a) != jsonpickle.encode(c)
    assert jsonpickle.encode(b) != jsonpickle.encode(c)


def test_predict_pretrained():
    # Tests the predict method using a pre-trained neural network for the xor problem
    a = neural_network.deserialize(
        b'\x80\x03cnn\nneural_network\nq\x00)\x81q\x01}q\x02(X\x0b\x00\x00\x00input_nodesq\x03K\x02X\x0c\x00\x00\x00hidden_nodesq\x04K\x04X\x0c\x00\x00\x00output_nodesq\x05K\x01X\n\x00\x00\x00weights_ihq\x06cmatrix\nMatrix\nq\x07)\x81q\x08}q\t(X\x04\x00\x00\x00rowsq\nK\x04X\x04\x00\x00\x00colsq\x0bK\x02X\x04\x00\x00\x00dataq\x0ccdill.dill\n_get_attr\nq\rcdill.dill\n_import_module\nq\x0eX\x15\x00\x00\x00numpy.core.multiarrayq\x0f\x85q\x10Rq\x11X\x0c\x00\x00\x00_reconstructq\x12\x86q\x13Rq\x14cnumpy\nndarray\nq\x15K\x00\x85q\x16C\x01bq\x17\x87q\x18Rq\x19(K\x01K\x04K\x02\x86q\x1acnumpy\ndtype\nq\x1bX\x02\x00\x00\x00f8q\x1cK\x00K\x01\x87q\x1dRq\x1e(K\x03X\x01\x00\x00\x00<q\x1fNNNJ\xff\xff\xff\xffJ\xff\xff\xff\xffK\x00tq b\x89C@\x9f\xc7\xbd6\x19\xe9\x07\xc0\xb1J\xcf\xcf\x97\x9a\x10\xc0\x86h\xa4\x00\xfe\x17\x1c@\x8fA?\xc1$Z\x16@\xea\x03\xdb\x01\xce[\x1d\xc0\x1c\x12"\xf9\xd0\xd9 \xc0\xd6\x00\xfc\xfe\x8f\xbc\x13@\xc1\x92T5\xdb\xe9\x17\xc0q!tq"bubX\n\x00\x00\x00weights_hoq#h\x07)\x81q$}q%(h\nK\x01h\x0bK\x04h\x0ch\x14h\x15K\x00\x85q&h\x17\x87q\'Rq((K\x01K\x01K\x04\x86q)h\x1e\x89C 5$S@\x82,\xf3\xbf\x86\xbf5\xa4\x1c\xa5\x16\xc0\xe4\xf8\xb8Hk\\\x14\xc0E\xf8\xea\xf0\xa8\xb5\x01@q*tq+bubX\x06\x00\x00\x00bias_hq,h\x07)\x81q-}q.(h\nK\x04h\x0bK\x01h\x0ch\x14h\x15K\x00\x85q/h\x17\x87q0Rq1(K\x01K\x04K\x01\x86q2h\x1e\x89C Z\xc7k\xb0n\xfc\xf1?\x19I\xbf\xf4\'\xcf"\xc0\xa4\x9c4\xe5\x93\xca\x0b@\x83\x1e\t\x08\xfa\xc0\x07\xc0q3tq4bubX\x06\x00\x00\x00bias_oq5h\x07)\x81q6}q7(h\nK\x01h\x0bK\x01h\x0ch\x14h\x15K\x00\x85q8h\x17\x87q9Rq:(K\x01K\x01K\x01\x86q;h\x1e\x89C\x08\x8c\xef\xa0\x7f(\xee\x04@q<tq=bubX\r\x00\x00\x00learning_rateq>G?\xb9\x99\x99\x99\x99\x99\x9aX\x13\x00\x00\x00activation_functionq?cactivation\nactivation_function\nq@)\x81qA}qB(X\x01\x00\x00\x00xqCcdill.dill\n_create_function\nqD(cdill.dill\n_load_type\nqEX\x08\x00\x00\x00CodeTypeqF\x85qGRqH(K\x03K\x00K\x03K\x04KSC\x14d\x01d\x01t\x00j\x01|\x00\x0b\x00\x83\x01\x17\x00\x1b\x00S\x00qINK\x01\x86qJX\x02\x00\x00\x00npqKX\x03\x00\x00\x00expqL\x86qMhCX\x01\x00\x00\x00iqNX\x01\x00\x00\x00jqO\x87qPX\x14\x00\x00\x00../src\\activation.pyqQX\x08\x00\x00\x00<lambda>qRK\nC\x00qS))tqTRqUcactivation\n__dict__\nhRNN}qVtqWRqXX\x01\x00\x00\x00yqYhD(hH(K\x03K\x00K\x03K\x03KSC\x0c|\x00d\x01|\x00\x18\x00\x14\x00S\x00qZNK\x01\x86q[)hYhNhO\x87q\\hQhRK\x0bhS))tq]Rq^cactivation\n__dict__\nhRNN}q_tq`Rqaubub.')
    predict = a.predict([1, 0])
    assert predict[0] == pytest.approx(0.97840756)
    assert type(predict) is numpy.ndarray
    assert type(predict[0]) is numpy.float64


def test_train():
    # Tests the train method by using a very simple dataset
    a = neural_network(1, 8, 1)
    a.set_learning_rate(10)
    for x in range(3):
        a.train([x], [1])
    assert a.predict([1])[0] > 0.9
